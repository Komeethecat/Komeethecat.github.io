<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Komeethecat</title>
    <link>https://Komeethecat.github.io/</link>
    <description>Recent content on Komeethecat</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Wed, 03 Apr 2019 22:14:58 +0900</lastBuildDate>
    
	<atom:link href="https://Komeethecat.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>엔터티</title>
      <link>https://Komeethecat.github.io/post/sqld/01/0101/02/</link>
      <pubDate>Wed, 03 Apr 2019 22:14:58 +0900</pubDate>
      
      <guid>https://Komeethecat.github.io/post/sqld/01/0101/02/</guid>
      <description>1. 엔터티의 개념  엔터티는 사람, 장소, 물건, 사건, 개념 등의 명사에 해당한다. 엔터티는 업무상 관리가 필요한 관심사에 해당한다. 엔터티는 저장이 되기 위한 어떤 것이다.  2. 엔터티와 인스턴스에 대한 내용과 표기법 3. 엔터티의 특징  업무에서 필요로 하는 정보 식별이 가능해야 함 두 개 이상의 인스턴스의 집합 업무프로세스에 의해 이용 속성을 포함  주식별자만 존재하고 일반속성은 전혀 없는 경우도 적절한 엔터티가 아님 (관계엔터티 예외)  관계의 존재  관계 생략 가능한 경우(1.</description>
    </item>
    
    <item>
      <title>데이터모델의 이해</title>
      <link>https://Komeethecat.github.io/post/sqld/01/0101/01/</link>
      <pubDate>Sun, 31 Mar 2019 19:47:07 +0900</pubDate>
      
      <guid>https://Komeethecat.github.io/post/sqld/01/0101/01/</guid>
      <description>1. 모델링의 이해 가. 모델링의 정의   Webster 사전   가설적 또는 일정 양식에 맞춘 표현 (a hypothetical or stylized representation)   어떤 것에 대한 예비표현으로, 그로부터 최종대상이 구축되도록 하는 계획으로서 기여하는 것     현실세계를 추상화, 단순화, 명확화 하기 위해 일정한 표기법에 의해 표현하는 기법   시스템의 대상이 되는 업무를 분석하여 정보시스템으로 구성하는 과정에서 업무의 내용과 정보시스템의 모습을 적절한 표기법(Notation)으로 표현하는 것</description>
    </item>
    
    <item>
      <title>Basic HTML Elements</title>
      <link>https://Komeethecat.github.io/help/basic-html-elements/</link>
      <pubDate>Mon, 16 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://Komeethecat.github.io/help/basic-html-elements/</guid>
      <description>&lt;p&gt;The main purpose of this article is to make sure that all basic HTML Elements are decorated with CSS so as to not miss any possible elements when creating new themes for Hugo.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://Komeethecat.github.io/help/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://Komeethecat.github.io/help/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>About Hugo</title>
      <link>https://Komeethecat.github.io/help/about/</link>
      <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://Komeethecat.github.io/help/about/</guid>
      <description>Hugo is a static site engine written in Go.
It makes use of a variety of open source projects including:
 Cobra Viper J Walter Weatherman Cast  Learn more and contribute on GitHub.
Setup Some fun facts about Hugo:
 Built in Go Loosely inspired by Jekyll Primarily developed by spf13 on the train while commuting to and from Manhattan. Coded in Vim using spf13-vim  Have questions or suggestions?</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://Komeethecat.github.io/help/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://Komeethecat.github.io/help/goisforlovers/</guid>
      <description>&lt;p&gt;Hugo uses the excellent &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; &lt;a href=&#34;https://golang.org/pkg/html/template/&#34;&gt;html/template&lt;/a&gt; library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in Go templates.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://Komeethecat.github.io/help/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://Komeethecat.github.io/help/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://Komeethecat.github.io/help/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://Komeethecat.github.io/help/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
  </channel>
</rss>